[{"title":"简单说一下自己对封装、继承、多态的一些理解","url":"/2020/02/19/简单说一下自己对封装、继承、多态的一些理解/","content":"\n### 简单理解\n#### 1、封装\n封装的实质，是提供了新的数据类型。\n\n#### 2、继承\n从外部看，从父类（基类）继承得到的子类（导出类）就像一个与基类具有相同接口（非`interface`声明的接口）的新类。当创建了一个导出类的对象时，该对象就已经包含了一个基类的子对象。*继承带来了多态的便捷性。*\n\n导出类可以通过覆写（`@Override`）基类的方法，来使同一个方法根据自己特性的不同而产生不同的表现和作用。\n\n#### 3、多态\n多态，即将改变的事物与未变的事物分离开。\n\n通过继承而来的导出类，能够使用向上转型的方式，来达到**后期绑定**（也称为*动态绑定*或*运行时绑定*）。\n\n- **绑定**：将一个方法用同一个方法主体关联起来。\n- **后期绑定**：运行时根据对象的类型进行绑定。\n\n### 具体谈多态的特性\n先通过一段代码，来解释**普通类继承**、**抽象类继承**、**接口实现**分别如何实现多态。\n\n```java\nabstract class Transportation {\n    public Transportation() {\n        System.out.println(\"This is a transportation.\");\n    }\n\n    public abstract void forward();\n}\n\ninterface TransportPower {\n    void powerSource();\n}\n\nclass Car extends Transportation {\n    private wheelNum = 4;\n\n    public int getWheelNum() {\n        return wheelNum;\n    }\n\n    @Override\n    public void forward() {\n        System.out.println(\"Car goes forward.\");\n    }\n}\n\nclass OilCar extends Car implements TransportPower {\n    @Override\n    public void powerSource() {\n        System.out.println(\"Use oil as power.\");\n    }\n\n    public void highSpeed() {\n        System.out.println(\"OilCar can highSpeed.\");\n    }\n}\n```\n\n#### 1、普通类继承\n导出类不一定需要覆写基类的所有方法，导出类对象中包含了基类的子对象，故通过`getWheelNum()`方法，可以获得基类中的成员变量`wheelNum`。\n\n#### 2、抽象类继承\n抽象类的导出类必须覆写基类的抽象方法，赋予具体实现。\n\n#### 3、接口实现\n实现了某接口的类必须覆写接口中所有的方法，赋予具体实现。\n\n***所有导出类，都可以通过向上转型的方式，在运行时绑定，从而实现多态性。***\n\n### 抽象类与接口的区别\n1. 接口只能定义抽象方法，而抽象类可以定义非抽象方法。\n2. 类只能单继承，而接口可以多实现。\n\n#### 深层讲解\n参考链接：https://blog.csdn.net/aptentity/article/details/68942916\n\n- 抽象类\n    - 对类型进行隐藏，可以构造出一个固定的一组行为的抽象描述，一个行为可以有任意个可能的具体实现方式。这个抽象的描述就是抽象类。（即多态性的体现）\n    - 这一组任意个可能的具体实现表现为所有可能的导出类，模块可以操作一个抽象类，由于模块依赖于一个固定的抽象类，那么它是不允许修改的。同时通过这个抽象类进行派生，拓展此模块的行为功能。\n- 接口\n    - 接口可以补充Java只有单继承的特性，实现“多继承”。\n    - 把程序模块进行固化的契约，降低偶合。把若干功能拆分出来，按照契约来进行实现和依赖。\n    - 定义接口有利于代码的规范。\n\n***抽象类强调的是从属关系，接口强调的是功能。***","tags":["Java","面向对象"]},{"title":"如何部署Hexo博客到GitHub","url":"/2020/02/12/如何部署Hexo博客到GitHub/","content":"\n#### 一、准备环境\n- node.js\n- npm\n\n我的环境为MacOS环境。\n\n#### 二、安装hexo框架\n1. 切换到root用户\n```text\nsudo su\n```\n\n2. 安装npm淘宝源cnpm\n```text\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n3. 安装hexo\n```text\ncnpm install -g hexo-cli\n```\n\n#### 三、搭建博客\n1. 新建博客文件夹在`~`路径下\n```text\nmkdir <文件夹命名>\n```\n\n2. 初始化\n```text\nsudo hexo init\n```\n\n#### 四、启动博客\n- 用于在本地测试\n```text\nhexo s\n```\n\n#### 五、在github上新建开放仓库\n- 新建github.io仓库，必须以自己的用户名命名，如：\n```text\n<GitHub的用户名>.github.io\n```\n\n#### 六、安装git插件\n- 在博客文件夹目录下\n```text\ncnpm install --save hexo-deployer-git\n```\n\n#### 七、配置\n##### 配置推送的GitHub仓库\n- 编辑`_config.yml`文件，在最底部，配置：\n```yml\ndeploy:\n  type: git\n  repo: 仓库地址\n  branch: master\n```\n\n##### 更改主题\n1. 在`<博客根目录>`目录下，克隆主题，这里以yilia主题举例：\n```text\ngit clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n2. 配置`_config.yml`文件\n- 配置主题为yilia\n```yml\ntheme: yilia\n```\n\n#### 八、一些操作\n- 清除缓存\n```text\nhexo clean\n```\n\n- 在本地开启服务\n```text\nhexo s\n```\n\n- 推送到仓库\n```text\nhexo d\n```","tags":["环境搭建"]}]